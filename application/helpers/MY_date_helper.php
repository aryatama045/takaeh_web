<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

if ( ! function_exists('relative_time'))
{
	function relative_time($timestamp)
	{
		if($timestamp != "" && !is_int($timestamp)){
			$timestamp = strtotime($timestamp);
		}

		if(!is_int($timestamp)){
			return "never";
		}

		$difference = time() - $timestamp;

		$periods = array("baru", "menit", "jam", "hari", "minggu",
		"bulan", "tahun", "dekade");

		//$lengths = array("60","60","24","7","4.35","12","10", "10");
		$lengths = array("60","60","23","7","4.35","12","10", "10");

		if ($difference >= 0 && $difference <= 3)
		{
			// this was in the past
			//$ending = "ago";
			$ending = " saja";
		}
		elseif($difference >= 4)
		{
			$ending = " yang lalu";
		}
		else
		{
			// this was in the future
			$difference = -$difference;
			$ending = "to go";
		}

		for ($j = 0; $difference >= $lengths[$j]; $j++)
		{
			$difference /= $lengths[$j];
		}

		$difference = round($difference);

		if ($difference != 1)
		{
			//$periods[$j].= "s";
		}

		if ($difference < 60 && $j == 0)
		{
			$text = "$periods[$j] $ending";
		}
		else
		{
			$text = "$difference $periods[$j] $ending";
		}

		return $text;

	}//end relative_time()
}

//---------------------------------------------------------------

if (!function_exists('date_difference'))
{
	function date_difference($start=null, $end=null, $interval='day', $reformat=false)
	{
		if (is_null($start))
		{
			return false;
		}

		if (is_null($end))
		{
			$end = date('Y-m-d H:i:s');
		}

		$times = array(
			'week'		=> 604800,
			'day'		=> 86400,
			'hour'		=> 3600,
			'minute'	=> 60
		);

		if ($reformat === true)
		{
			$start 	= strtotime($start);
			$end	= strtotime($end);
		}

		$diff = $end - $start;

		return round($diff / $times[$interval]);

	}//end date_difference()
}

//---------------------------------------------------------------

if ( ! function_exists('user_time'))
{
	function user_time($timestamp = NULL, $timezone = NULL, $format = 'r')
	{
		if ( ! $timezone)
		{
			$CI =& get_instance();
			$CI->load->library('users/auth');
			if ($CI->auth->is_logged_in())
			{
				$timezone = standard_timezone($CI->auth->user()->timezone);
			}
		}

		$timestamp = ($timestamp) ? $timestamp : time();

		$dtzone = new DateTimeZone($timezone);
		$dtime = new DateTime();

		return $dtime->setTimestamp($timestamp)->setTimeZone($dtzone)->format($format);

	}//end user_time()
}

//---------------------------------------------------------------

if ( ! function_exists('standard_timezone'))
{
    /**
     * Convert CodeIgniter's time zone strings to standard PHP time zone strings
     *
     * @param String $ciTimezone A time zone string generated by CodeIgniter
     *
     * @return String    A PHP time zone string
     */
    function standard_timezone($ciTimezone)
    {
        switch ($ciTimezone) {
            case 'UM12':
                return 'Pacific/Kwajalein';
            case 'UM11':
                return 'Pacific/Midway';
            case 'UM10':
                return 'Pacific/Honolulu';
            case 'UM95':
                return 'Pacific/Marquesas';
            case 'UM9':
                return 'Pacific/Gambier';
            case 'UM8':
                return 'America/Los_Angeles';
            case 'UM7':
                return 'America/Boise';
            case 'UM6':
                return 'America/Chicago';
            case 'UM5':
                return 'America/New_York';
            case 'UM45':
                return 'America/Caracas';
            case 'UM4':
                return 'America/Sao_Paulo';
            case 'UM35':
                return 'America/St_Johns';
            case 'UM3':
                return 'America/Buenos_Aires';
            case 'UM2':
                return 'Atlantic/St_Helena';
            case 'UM1':
                return 'Atlantic/Azores';
            case 'UP1':
                return 'Europe/Berlin';
            case 'UP2':
                return 'Europe/Kaliningrad';
            case 'UP3':
                return 'Asia/Baghdad';
            case 'UP35':
                return 'Asia/Tehran';
            case 'UP4':
                return 'Asia/Baku';
            case 'UP45':
                return 'Asia/Kabul';
            case 'UP5':
                return 'Asia/Karachi';
            case 'UP55':
                return 'Asia/Calcutta';
            case 'UP575':
                return 'Asia/Kathmandu';
            case 'UP6':
                return 'Asia/Almaty';
            case 'UP65':
                return 'Asia/Rangoon';
            case 'UP7':
                return 'Asia/Bangkok';
            case 'UP8':
                return 'Asia/Hong_Kong';
            case 'UP875':
                return 'Australia/Eucla';
            case 'UP9':
                return 'Asia/Tokyo';
            case 'UP95':
                return 'Australia/Darwin';
            case 'UP10':
                return 'Australia/Melbourne';
            case 'UP105':
                return 'Australia/LHI';
            case 'UP11':
                return 'Asia/Magadan';
            case 'UP115':
                return 'Pacific/Norfolk';
            case 'UP12':
                return 'Pacific/Fiji';
            case 'UP1275':
                return 'Pacific/Chatham';
            case 'UP13':
                return 'Pacific/Samoa';
            case 'UP14':
                return 'Pacific/Kiritimati';
            case 'UTC':
            default:
                return 'UTC';
        }
    }

}

function format_date($unix, $format = 'd M Y H:i:s')
{
	if ($unix == '' || ! is_numeric($unix))
	{
		$unix = strtotime($unix);
	}

	return strstr($format, '%') !== FALSE
		? ucfirst(utf8_encode(strftime($format, $unix))) //or? strftime($format, $unix)
		: date($format, $unix);
}

function db_to_timestamp($datetime = "")
{
  // function is only applicable for valid MySQL DATETIME (19 characters) and DATE (10 characters)
  $l = strlen($datetime);
    if(!($l == 10 || $l == 19))
      return 0;

    //
    $date = $datetime;
    $hours = 0;
    $minutes = 0;
    $seconds = 0;

    // DATETIME only
    if($l == 19)
    {
      list($date, $time) = explode(" ", $datetime);
      list($hours, $minutes, $seconds) = explode(":", $time);
    }

    list($year, $month, $day) = explode("-", $date);

    return mktime($hours, $minutes, $seconds, $month, $day, $year);
}

function dbdate_to_array($datetime = "")
{
  // function is only applicable for valid MySQL DATETIME (19 characters) and DATE (10 characters)
  $l = strlen($datetime);
    if(!($l == 10 || $l == 19))
      return 0;

    //
    $date = $datetime;
    $hours = 0;
    $minutes = 0;
    $seconds = 0;

    // DATETIME only
    if($l == 19)
    {
      list($date, $time) = explode(" ", $datetime);
      list($hours, $minutes, $seconds) = explode(":", $time);
    }

    list($year, $month, $day) = explode("-", $date);
	$tm = mktime($hours, $minutes, $seconds, $month, $day, $year);
	$wday = date('N', $tm);
	return array('hour' => $hours,'minute' => $minutes, 'second' => $seconds, 'month' => $month, 'day' => $day,'wday' => $wday, 'year' => $year, '0' => $tm);
}

function db_to_date($datetime = "", $format = "d M Y, H:i")
{
	if(trim($datetime) == '' or $datetime == '0000-00-00 00:00:00') return '';
    return date($format, db_to_timestamp($datetime));
}

function timestamp_to_db($timestamp = "", $datetime = true)
{
  if(empty($timestamp) || !is_numeric($timestamp)) $timestamp = time();

    return ($datetime) ? date("Y-m-d H:i:s", $timestamp) : date("Y-m-d", $timestamp);
}

function date_to_db($date)
{
	return date( 'Y-m-d H:i:s', strtotime($date));
}

function now($show_time = true)
{
	return date('Y-m-d'.($show_time ? ' H:i:s' : ''), time());
}

/*
$tanggal = "2009-12-30 23:59:45";
echo indonesian_date ($tanggal);
 */

function tanggal($timestamp = '', $time = false){
    return indonesian_date($timestamp, 'j M Y', $time);
}
function indonesian_date($timestamp = '', $date_format = 'j M Y', $time = false, $suffix = '') { // $date_format = 'l, j F Y, H:i'
    if (trim ($timestamp) == '')
    {
            $timestamp = time ();
    }
    elseif (!ctype_digit ($timestamp))
    {
        $timestamp = strtotime ($timestamp);
    }
    # remove S (st,nd,rd,th) there are no such things in indonesia :p
    $date_format .= $time ? ', H:i' : '';
    $date_format = preg_replace ("/S/", "", $date_format);
    $pattern = array (
        '/Mon[^day]/','/Tue[^sday]/','/Wed[^nesday]/','/Thu[^rsday]/',
        '/Fri[^day]/','/Sat[^urday]/','/Sun[^day]/','/Monday/','/Tuesday/',
        '/Wednesday/','/Thursday/','/Friday/','/Saturday/','/Sunday/',
        '/Jan[^uary]/','/Feb[^ruary]/','/Mar[^ch]/','/Apr[^il]/','/May/',
        '/Jun[^e]/','/Jul[^y]/','/Aug[^ust]/','/Sep[^tember]/','/Oct[^ober]/',
        '/Nov[^ember]/','/Dec[^ember]/','/January/','/February/','/March/',
        '/April/','/June/','/July/','/August/','/September/','/October/',
        '/November/','/December/',
    );
    $replace = array ( 'Sen','Sel','Rab','Kam','Jum','Sab','Min',
        'Senin','Selasa','Rabu','Kamis','Jumat','Sabtu','Minggu',
        'Jan ','Feb ','Mar ','Apr ','Mei ','Jun ','Jul ','Ags ','Sep ','Okt ','Nov ','Des ',
        'Januari ','Februari ','Maret ','April ','Juni ','Juli ','Agustus ','September ',
        'Oktober ','November ','Desember ',
    );
    $date = date ($date_format, $timestamp);
    $date = preg_replace ($pattern, $replace, $date);
    $date = "{$date} {$suffix}";
    return $date;
}

function indonesian_date_no_time($timestamp = '', $date_format = 'l, j M Y ') {
    if (trim ($timestamp) == '')
    {
            $timestamp = time ();
    }
    elseif (!ctype_digit ($timestamp))
    {
        $timestamp = strtotime ($timestamp);
    }
    # remove S (st,nd,rd,th) there are no such things in indonesia :p
    $date_format = preg_replace ("/S/", "", $date_format);
    $pattern = array (
        '/Mon[^day]/','/Tue[^sday]/','/Wed[^nesday]/','/Thu[^rsday]/',
        '/Fri[^day]/','/Sat[^urday]/','/Sun[^day]/','/Monday/','/Tuesday/',
        '/Wednesday/','/Thursday/','/Friday/','/Saturday/','/Sunday/',
        '/Jan[^uary]/','/Feb[^ruary]/','/Mar[^ch]/','/Apr[^il]/','/May/',
        '/Jun[^e]/','/Jul[^y]/','/Aug[^ust]/','/Sep[^tember]/','/Oct[^ober]/',
        '/Nov[^ember]/','/Dec[^ember]/','/January/','/February/','/March/',
        '/April/','/June/','/July/','/August/','/September/','/October/',
        '/November/','/December/',
    );
    $replace = array ( 'Sen','Sel','Rab','Kam','Jum','Sab','Min',
        'Senin','Selasa','Rabu','Kamis','Jumat','Sabtu','Minggu',
        'Jan ','Feb ','Mar ','Apr ','Mei ','Jun ','Jul ','Ags ','Sep ','Okt ','Nov ','Des ',
        'Januari ','Februari ','Maret ','April ','Juni ','Juli ','Agustus ','September ',
        'Oktober ','November ','Desember ',
    );
    $date = date ($date_format, $timestamp);
    $date = preg_replace ($pattern, $replace, $date);
    return $date;
}
